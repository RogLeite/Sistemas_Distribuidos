#include "/home/terra/TerraNG/terra/TerraNet.defs"
#define LED_VIEW 2 //Define o tempo em que os leds ficam acesos
#define ROOT_TIME 15
#define SOMETHING 3
#define TEMP_LIM 500
#define MSG_TYPE_PATHING 1
#define MSG_TYPE_ALERT 2
#define MSG_TYPE_SUCESSORES 3
#define ALERT_REPEAT 4
#define TEMP_MEM 4
//vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
#define QTD_SUCESSORES_SQUARED 56 //QTD_SUCESSORES*(QTD_SUCESSORES+Id) = 56 = 7*(7+1)
var ushort[QTD_SUCESSORES_SQUARED] sucessores;
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//#define TESTE 1
#define QTD_SUCESSORES 7
#define ANSWER_TIMEOUT 2


var ubyte fila;

var ushort nodeId = getNodeId();
var ushort alta_temp = 0;
var ushort[TEMP_MEM] temps;
var ushort temp = 0;
var ushort med_temp = 0;

//define mensagem tipo MSG_TYPE_PATHING
pktype pathMsg from radioMsg with
	var ubyte num_saltos;
	var ulong versao_rota;
end

var pathMsg sendPath;
var pathMsg recPath;

sendPath.type = MSG_TYPE_PATHING;
sendPath.target = BROADCAST;
sendPath.source = nodeId;
sendPath.num_saltos = 0;
sendPath.versao_rota = 0;

//define mensagem tipo MSG_TYPE_SUCESSORES

regtype sucessor with
	var ushort id;
	var ushort[QTD_SUCESSORES] sucessores;
end

pktype posMsg from radioMsg with
	var ushort[QTD_SUCESSORES] sucessores;
end

var posMsg sendPos;
var posMsg recPos;

sendPos.type = MSG_TYPE_SUCESSORES;
sendPos.target = BROADCAST;
sendPos.source = nodeId;


//define mensagem tipo MSG_TYPE_ALERT
pktype alertMsg from radioMsg with end

var alertMsg sendAlert;
var alertMsg recAlert;
sendAlert.target = BROADCAST;
sendAlert.type = MSG_TYPE_ALERT;
sendAlert.source = nodeId;

loop do
	if nodeId == 11 then  //se é a raiz:
	//espera e manda o criar path
		par do		
			loop do
				sendPath.versao_rota = sendPath.versao_rota + 1;
//vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
				//incrementa a versao da rota
				emit SEND(sendPath);
				await SEND_DONE();
				loop i,QTD_SUCESSORES_SQUARED do
					sucessores[i] = 0;
				end
				par/or do
					loop i,QTD_SUCESSORES do
						recPos = await RECEIVE(MSG_TYPE_SUCESSORES);
						sucessores[i*(QTD_SUCESSORES+1)] = recPos.source;
						loop j,QTD_SUCESSORES do
							sucessores[i*(QTD_SUCESSORES+1)+1+j] = recPos.sucessores[j];
						end
					end
				with
					await ANSWER_TIMEOUT s;
				end

//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
			end
		with
			//Raiz recebendo alertas
			loop do
				recAlert = await RECEIVE(MSG_TYPE_ALERT);	
				if recAlert.type == MSG_TYPE_ALERT then
					emit LED0(ON);
					emit LED1(ON);
					emit LED2(ON);
					await 3s;
					emit LED0(OFF);
					emit LED1(OFF);
					emit LED2(OFF);
				end
			end
		end


	else //se não é a raiz
		var ushort progenitor;
		par do 
			//LISTENING--------------------------------------------------
			par do
				//fica escutando recPath
				loop do
					recPath = await RECEIVE(MSG_TYPE_PATHING);
					if recPath.versao_rota > sendPath.versao_rota then
						progenitor = recPath.source;
						sendAlert.target = progenitor;
						sendPath.num_saltos = recPath.num_saltos + 1;
						sendPath.versao_rota = recPath.versao_rota;

//vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
						emit SEND(sendPath);
						await SEND_DONE();
						//ESCUTA-SUCESSORES-----------------------------
						loop i,QTD_SUCESSORES_SQUARED do
							sucessores[i] = 0;
						end
						par/or do
							loop i,QTD_SUCESSORES do
								recPos = await RECEIVE(MSG_TYPE_SUCESSORES);
								sucessores[i*(QTD_SUCESSORES+1)] = recPos.source;
								loop j,QTD_SUCESSORES do
									sucessores[i*(QTD_SUCESSORES+1)+1+j] = recPos.sucessores[j];
								end
							end
						with
							await ANSWER_TIMEOUT s;
						end

//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
						//FIM-ESCUTA-SUCESSORES-------------------------
						//RESPONDE-AO-PROGENITOR-----------------------------
						sendPos.target = progenitor;
						emit SEND(sendPos); 
						await SEND_DONE();
						//END-RESPONDE-AO-PROGENITOR-------------------------

					else
						//se recebeu uma rota obsoleta, pisca não faz nada

					end
				end

			with 
				//Recebendo alertas e enviando para o progenitor
				loop do
					recAlert = await RECEIVE(MSG_TYPE_ALERT);	
					if recAlert.type == MSG_TYPE_ALERT then
						emit SEND(sendAlert);
						await SEND_DONE();
					end
					emit LED0(OFF);
				end
			end
			//END-LISTENING----------------------------------------------
		with
			//READING-TEMP-------------------------------------
			loop i, TEMP_MEM do temps[i] = 0; end
			loop do
				loop i,TEMP_MEM do
					await SOMETHING s;
					//fica esperando tempo passar do limite
					emit REQ_TEMP();
					temps[i] = await TEMP();
					temp = 0;
					loop j,TEMP_MEM do temp = temp+temps[i]; end
					med_temp = temp/TEMP_MEM;
					if med_temp > TEMP_LIM then
						//temperatura excedeu limite
						alta_temp = med_temp;
						emit LED2(ON);
						//emitir mensagem tipo MSG_TYPE_ALERT
						emit SEND(sendAlert);
						await SEND_DONE();
						await ALERT_REPEAT s;
					else
						emit LED2(OFF);			
					end
				end
			end
			//END-READING-TEMP---------------------------------
		end
	end
	//END-NORMAL-EXECUTION-----------------------------------------------
end

