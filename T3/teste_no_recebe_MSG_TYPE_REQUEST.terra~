#include "/home/terra/TerraNG/terra/TerraNet.defs"
#define LED_VIEW 2 //Define o tempo em que os leds ficam acesos
#define ROOT_TIME 15
#define SOMETHING 3
#define TEMP_LIM 500
#define MSG_TYPE_PATHING 1
#define MSG_TYPE_ALERT 2
#define MSG_TYPE_SUCESSORES 3
#define QTD_SUCESSORES 7
#define ANSWER_TIMEOUT 2
#define ALERT_REPEAT 4
#define TEMP_MEM 4
//NOVIDADES--------------------------
#define MSG_TYPE_REQUEST 4
#define MSG_TYPE_ANSWER 5
//NOVIDADES++++++++++++++++++++++++++
//#define TESTE 1
var ubyte fila;
var ushort progenitor=0;

var ushort nodeId = getNodeId();
var ushort alta_temp = 0;
var ushort[TEMP_MEM] temps;
var ushort temp = 0;
var ushort med_temp = 0;

//define mensagem tipo MSG_TYPE_PATHING
pktype pathMsg from radioMsg with
	var ubyte num_saltos;
	var ulong versao_rota;
end

var pathMsg sendPath;
var pathMsg recPath;

sendPath.type = MSG_TYPE_PATHING;
sendPath.target = BROADCAST;
sendPath.source = nodeId;
sendPath.num_saltos = 0;
sendPath.versao_rota = 0;


//define mensagem tipo MSG_TYPE_SUCESSORES

regtype sucessor with
	var ushort id;
	var ushort[QTD_SUCESSORES] sucessores;
end

var sucessor sucessor1;
var sucessor sucessor2;
var sucessor sucessor3;
var sucessor sucessor4;
var sucessor sucessor5;
var sucessor sucessor6;
var sucessor sucessor7;

pktype posMsg from radioMsg with
	var ushort[QTD_SUCESSORES] sucessores;
end

var posMsg sendPos;
var posMsg recPos;

sendPos.type = MSG_TYPE_SUCESSORES;
sendPos.target = BROADCAST;
sendPos.source = nodeId;

//define mensagem tipo MSG_TYPE_ALERT
pktype alertMsg from radioMsg with end

var alertMsg sendAlert;
var alertMsg recAlert;
sendAlert.target = BROADCAST;
sendAlert.type = MSG_TYPE_ALERT;
sendAlert.source = nodeId;

//define mensagem tipo MSG_TYPE_REQUEST
pktype requestMsg from radioMsg with 
	var ushort requestedId;
end

var requestMsg sendReq;
var requestMsg recReq;
sendReq.target = BROADCAST;
sendReq.type = MSG_TYPE_REQUEST;
sendReq.source = nodeId;

//define mensagem tipo MSG_TYPE_ANSWER
pktype answerMsg from radioMsg with 
	var ushort temp;
end

var answerMsg sendAns;
var answerMsg recAns;
sendAns.target = BROADCAST;
sendAns.type = MSG_TYPE_REQUEST;
sendAns.source = nodeId;
/*
loop i, QTD_SUCESSORES do
	if sucessorN.sucessores[i] == reqId then
//		envia pra sucessorN;
	end
end
*/

//NOVIDADES---------------------------
//fica escutando recReq
loop do
	recReq = await RECEIVE(MSG_TYPE_REQUEST);
	var ushort reqId = recReq.requestedId;
	if reqId == nodeId then
		sendAns.temp = med_temp;
		emit SEND(sendAns);
		await SEND_DONE();
	else/if sucessor1.id==reqId then
		sendReq.requestedId = reqId;
		sendReq.target = sucessor1.id;
		emit SEND(sendReq);
		await SEND_DONE();
	else/if sucessor2.id==reqId then
		sendReq.requestedId = reqId;
		sendReq.target = sucessor2.id;
		emit SEND(sendReq);
		await SEND_DONE();
	else/if sucessor3.id==reqId then
		sendReq.requestedId = reqId;
		sendReq.target = sucessor3.id;
		emit SEND(sendReq);
		await SEND_DONE();
	else/if sucessor4.id==reqId then
		sendReq.requestedId = reqId;
		sendReq.target = sucessor4.id;
		emit SEND(sendReq);
		await SEND_DONE();
	else/if sucessor5.id==reqId then
		sendReq.requestedId = reqId;
		sendReq.target = sucessor5.id;
		emit SEND(sendReq);
		await SEND_DONE();
	else/if sucessor6.id==reqId then
		sendReq.requestedId = reqId;
		sendReq.target = sucessor6.id;
		emit SEND(sendReq);
		await SEND_DONE();
	else/if sucessor7.id==reqId then
		sendReq.requestedId = reqId;
		sendReq.target = sucessor7.id;
		emit SEND(sendReq);
		await SEND_DONE();
	else
	//[[EDIT]] Ã© aqui que vou procurar dentre os sucessores dos sucessores?
		
	end
end

//NOVIDADES++++++++++++++++++++++++++
